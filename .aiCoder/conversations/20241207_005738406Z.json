{"messages":[{"role":"system","content":"./.aiCoder/default-system-prompt.md","filePath":"./.aiCoder/default-system-prompt.md","description":""},{"role":"user","content":"./.aiCoder/default-plan-prompt.md","filePath":"./.aiCoder/default-plan-prompt.md","description":""},{"role":"user","content":"./brep.js","filePath":"./brep.js","description":"user"},{"role":"system","content":"./.aiCoder/snippet-production-prompt.md","filePath":"./.aiCoder/snippet-production-prompt.md","description":""},{"role":"user","content":"Write the project method in the Vector3D class."},{"role":"assistant","content":"```javascript\nclass Vector3D {\n    constructor(x = 0, y = 0, z = 0) {\n        // Input validation\n        if (!Number.isFinite(x) || !Number.isFinite(y) || !Number.isFinite(z)) {\n            throw new Error('Coordinates must be finite numbers');\n        }\n        // Use Object.defineProperties for immutable coordinates\n        Object.defineProperties(this, {\n            'x': {\n                value: x === 0 ? 0 : x,\n                // Protect against -0\n                writable: false,\n                enumerable: true,\n                configurable: false\n            },\n            'y': {\n                value: y === 0 ? 0 : y,\n                writable: false,\n                enumerable: true,\n                configurable: false\n            },\n            'z': {\n                value: z === 0 ? 0 : z,\n                writable: false,\n                enumerable: true,\n                configurable: false\n            }\n        });\n        // Freeze the instance to make it fully immutable\n        Object.freeze(this);\n    }\n    // ... other methods ...\n    \n    project(onto) {\n        // Input validation\n        if (!(onto instanceof Vector3D)) {\n            throw new Error('Parameter must be a Vector3D instance');\n        }\n        // Calculate dot product\n        const dotProduct = this.dot(onto);\n        const ontoLengthSquared = onto.lengthSquared();\n        if (Math.abs(ontoLengthSquared) < Number.EPSILON) {\n            throw new Error('Cannot project onto zero vector');\n        }\n        const scale = dotProduct / ontoLengthSquared;\n        // Return projected vector\n        return new Vector3D(onto.x * scale, onto.y * scale, onto.z * scale);\n    }\n}\n```"}],"title":"Implement project.Vector3D","id":"20241207_005738406Z","targetFile":"./brep.js","chatMode":"chat","lastModified":"2024-12-07T00:57:45.478Z"}